-

! TRADING SYSTEM {
    basically Path of Exile's trade UI
    quickbar button puts an item in cursor; clicking on a player prompts them to accept/reject trade, via playerext
    right click dismisses without trading, and emits a sound effect to the player (might need UI shenanigans for local sfx?)
    cursor item should make it look like a trade-icon cursor, if that's achievable
    on (unexpected) uninit, spawn a stagehand at player position that lasts for ~.5sec and deletes cursor item from anywhere it can find
    (consume item drops, consume from containers within reach, consume from player inventory)
}

- lib frontend for playerextender, to make things a bit more convenient (also polymorphism in case playerext needs to change)
see if activeitems can store data into themselves; if so, give phase drill its own battery?
alternative, tip-glow-only effect for phase drill when cursor is too close to player
^ actually, just add particles to beam tip and snap them to the lens if too close
- some sort of animation for the beam during phase drill hold to make it look like it's doing something and not just sitting there

configurable tram stop {
  built-in player sensor
}

reserve material ID range somewhere
semigloss black hull panel

/ figure out how the feck to detect if shift is held (done hackishly, but at least it's there)
implement slot-drop? drop into empty space, or maybe the selection icon area?
somewhat redesign UI to make better use of now-unneeded tooltip area

TERMINAL THEMABILITY?
make terminal not update every tick just for animation if it's not waiting on any players

x BYOS functionality as machine { // probably incompatible with FU's version
    damageTileArea with ridiculously high strength and harvest level and radius big enough to cover a t8 vanilla ship from one end, in both fg and bg
    itemDropQuery and collect into database
    upgrade player ship to custom tier to get rid of bg image and collision material
    force-kill objects set "residual" by Hacking them and using object.smash
}
patch warp state matching into encounter variations of booster flames (/objects/ship/boosters/)
add distinguishing names to even/odd small booster flames
lots of shiny new ship components, especially animating ones that match their state to flight {
    - also floor-only teleporters (implemented as part of telepads)
    warp cores should count as FU ones, if possible
}

power stuffs {
    - pure conduits to route power further and more neatly
    
    machine that powers warp core via fluxpulse (world property "ship.fuel")
    wireless charger
    
    nanofield {
        action states?
        fall damage immunity?
        
        - some temporary means of giving the thing actual armor stats
        
        power draw for stuff
        
        elytra {
            - tween rotation and implement rez/derez animation
            - autoswitch only when environment gravity changes
            speed/thrust stats
        }
    }
    
    - fix phase drill aim compensation (beam start)
    (...and flashlight)

    fluxsaber (fluxpulse-charged beamsword)
    pulse rifle (machine gun), vector rifle (railgun)
    fluxpulse weapons get a damage bonus when wielded in elytra in a zero-g environment
    
    intermediary pulse-battery component?
    
    powered lamp that fills a large region with full-bright light (basically volumetric lighting at the cost of fp)
    
    more smelter-type machines
    ^ chance bias stat (inverse exponent to random number)
    
    prefix and move power categories to stardustlib
    modular gear category
    
    eventually make transmatter network require power (after rewrite)
}

compost bin that makes food age faster, for use as biofuel
^ some sort of powered processor to make (liquid) biodiesel?

renamer (custom shortdescription, put vanilla one as category because tooltip)

actual configurator object instead of having it in the quickbar for non-admins

some item transport for automation (and library to make use of input/output configuration)
networked wire I/O ports

# make RCS tech obtainable; balance energy use

clean up tinkertable categories

some major cleanup in places

probably a UI lib that encapsulates widgets (read from heirarchy)

Extend sync library {
    //Recognize RpcPromise returning another RpcPromise and replace in queue
    
    actually, response system with a proper response-message instead of just an RpcPromise
    generate responseID with makeuuid? register with an anonymous function for continuation of operation after response
}

// Transmatter network reimplementation { // not sure if it's needed or if drive bays just need further fixing up
    Controller {
        API {
            callable via both callScriptedEntity and sendEntityMessage
            each request runs as a coroutine placed on a queue for suspendability and environment cleanliness
            
            ...
        }
        Network Scan Module {
            periodically scans the network pool, assembles the list of storage devices and notifies peripherals
        }
    }
}
